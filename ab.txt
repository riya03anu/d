//1 ------------------
#plt.figure(figsize=(16,9))
plt.title('Temperature Plot of INDIA')
plt.xlabel('Year')
plt.ylabel('Anuual Average Temperature')
plt.scatter(x, y, label = 'actual', color='r')
plt.plot(x, predicted, label = 'predicted', color='g')
plt.legend()


//2-----------------------

from sklearn.preprocessing import Binarizer bi Binarizer (threshold=0.75) df['Chance of Admit'] = bi.fit_transform(df [['Chance of Admit '11)

df.head()

x = df.drop('Chance of Admit, axis= 1)
y=df['Chance of Admit']

X

y = y.astype('int')
sns.countplot(xy);

# Cross-validation

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split( x, y, random_state=0, test_size=0.25)

x_train.shape
x_test.shape
x_test

# Import the class from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier (random_state=0)

 classifier.fit(x_train, y_train)

 DecisionTreeClassifier (random_state=0)

y_pred = classifier.predict(x_test)

result = pd.DataFrame({
'actual' y_test, 'predicted' y_pred })

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt plt.figure(figsize=(12,12)) plot_tree (classifier, fontsize=8, filled=True, rounded=True, feature_names=x.columns, class_names=['NA', 'AD']);

4----------------------
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier

# Load the SMS spam dataset
df = pd.read_csv('/content/spam.csv', encoding='ISO-8859-1')

# Create a binary target variable 'spam'
df['spam'] = df['v1'].apply(lambda x: 1 if x == 'spam' else 0)

# Select relevant columns
new_df = df[['v1', 'v2', 'spam']

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(new_df['v2'], new_df['spam'], test_size=0.2, random_state=42)

# Convert text messages to numerical features using CountVectorizer
vectorizer = CountVectorizer()
x_train_count = vectorizer.fit_transform(x_train)
x_test_count = vectorizer.transform(x_test)

# Train a Multinomial Naive Bayes classifier
naive_bayes_model = MultinomialNB()
naive_bayes_model.fit(x_train_count, y_train)

# Train a Random Forest classifier
random_forest_model = RandomForestClassifier(n_estimators=100, random_state=42)
random_forest_model.fit(x_train_count, y_train)

# Evaluate the Multinomial Naive Bayes model
naive_bayes_accuracy = naive_bayes_model.score(x_test_count, y_test)
print("Multinomial Naive Bayes Accuracy:", naive_bayes_accuracy)

# Evaluate the Random Forest model
random_forest_accuracy = random_forest_model.score(x_test_count, y_test)
print("Random Forest Accuracy:", random_forest_accuracy)


5--------------------------------

x = df.iloc[:,3:]
x
plt.title('Unclustered Data')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.scatter (x['Annual Income (ks)'], x['Spending Score (1-100)'])

from sklearn.cluster import KMeans, AgglomerativeClustering

km = KMeans (n_clusters=3)

x.shape

km.fit_predict(x)

#SSE 
km.inertia_

sse = []
for k in range(1,16):
km = KMeans (n_clusters=k) km.fit_predict(x) sse.append(km.inertia_)

Sse

plt.title('Elbow Method')
plt.xlabel('Value of K')
plt.ylabel('SSE')
plt.grid()
plt.xticks(range(1,16))
plt.plot(range(1,16), sse, marker='.', color='red')

from sklearn.metrics import silhouette_score

silh = []
for k in range(2,16):
km = KMeans (n_clusters=k)
labels = km.fit_predict(x)
score silhouette_score (x, labels) silh.append(score)

plt.title('Silhoutte Method')
plt.xlabel('Value of K')
plt.ylabel('Silhoutte Score')
plt.grid()
plt.xticks(range(2,16)) 1
plt.bar(range(2,16), silh, color='red')

km = KMeans (n_clusters=5, random_state=0)

labels = km. fit_predict(x)
labels

cent = km.cluster_centers_

 plt.figure(figsize=(16,9))
plt.subplot(1,2,1)
plt.title('Unclustered Data')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.scatter (x['Annual Income (k$)'], x['Spending Score (1-100)'])

plt.subplot(1,2,2)
plt.title('Clustered Data')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.scatter (x['Annual Income (k$)'], x['Spending Score (1-100)'], c=labels) 
plt.scatter (cent[:,0], cent[:,1], s=50, color='k')


//6------------------------

import pandas as pd import csv from mlxtend.preprocessing import TransactionEncoder from alxtend. frequent patterns import apriori, association rules

 dataset [] 
with open('Market Basket Optimisation.csv') as file: reader = csv.reader (file, delimiter=',') for row in reader:
dataset += [row]

dataset[]

len(dataset)

te= TransactionEncoder()
 x = te.fit_transform(dataset)

x

df = pd.DataFrame(x, columns=te.columns_)

Len(te.columns_)

df.head()

# 1. Find frequent itemsets

freq_itemset = apriori (df, min_support=0.01, use colnames=True)

# Find the rules rules association_rules (freq_itemset, metric-'confidence', min_threshold=0.25)








//111---------------------------------
#include <bits/stdc++.h>
using namespace std;

int max(int a, int b) { return (a > b) ? a : b; }

int knapsack(int maxWeight, int profit[], int weight[], int size) {
    int i, w;
    int K[size + 1][maxWeight + 1];

    // Initialize a 2D array to keep track of the selected items
    bool selected[size + 1][maxWeight + 1];

    for (i = 0; i <= size; i++) {
        for (w = 0; w <= maxWeight; w++) {
            if (i == 0 || w == 0) {
                K[i][w] = 0;
                selected[i][w] = false;
            } else if (weight[i - 1] <= w) {
                K[i][w] = max(profit[i - 1] + K[i - 1][w - weight[i - 1]], K[i - 1][w]);
                if (profit[i - 1] + K[i - 1][w - weight[i - 1]] > K[i - 1][w]) {
                    selected[i][w] = true;
                } else {
                    selected[i][w] = false;
                }
            } else {
                K[i][w] = K[i - 1][w];
                selected[i][w] = false;
            }
        }
    }

    // Now, to get the items included, you can traverse the selected array
    int item = size;
    int remainingWeight = maxWeight;

    cout << "Max Profit: " << K[size][maxWeight] << endl;
    cout << "Items Included:" << endl;

    while (item > 0 && remainingWeight > 0) {
        if (selected[item][remainingWeight]) {
            cout << "Item " << item << " (Profit: " << profit[item - 1] << ", Weight: " << weight[item - 1] << ")" << endl;
            remainingWeight -= weight[item - 1];
        }
        item--;
    }
}

int main() {
    int size = 0;

    cout << "Enter No. of Items: ";
    cin >> size;

    int profit[size], weight[size];

    for (int i = 0; i < size; i++) {
        cout << "Enter the " << i + 1 << "th item profit Value: ";
        cin >> profit[i];

        cout << "Enter the " << i + 1 << "th item weight Value: ";
        cin >> weight[i];
    }

    int maxWeight = 0;

    cout << "Enter the max weight: ";
    cin >> maxWeight;

    knapsack(maxWeight, profit, weight, size);

    return 0;
}

///222------------------------------------------
#include <bits/stdc++.h>
using namespace std ;

struct Item 
{
	double profit ;
	double weight ;
	int index ;
};

bool comparator(Item A, Item B)
{
	double ratio1 = (double)A.profit/(double)A.weight ;
	double ratio2 = (double)B.profit/(double)B.weight ;
	return ratio1 > ratio2 ; // returns true if R1 > R2 
};

int knapSack(Item data[], int size, int maxWeight)
{

    Item sortedData[size];
    for (int i = 0; i < size; i++)
    {
        sortedData[i] = data[i];
    }

    sort(sortedData, sortedData + size, comparator); //Sorting using custom comparator

	double maxValue = 0.0 ;

	cout << "Selected Items" << endl ;

	for(int i = 0 ; i < size ; i++)
	{
		if (data[i].weight <= maxWeight) {
			maxWeight -= data[i].weight;
			maxValue += data[i].profit;
			cout << "Item index: " << data[i].index << ", profit: " << data[i].profit << ", Quantity: 1" << endl;
		} else {
			double fractionalQuantity = (double)maxWeight / (double)data[i].weight;
			double fractionalProfitValue = ((double)data[i].profit) * ((double)fractionalQuantity);

			maxValue += fractionalProfitValue;

			cout << "Item index: " << data[i].index << ", profit: " << fractionalProfitValue << ", Quantity: " << fractionalQuantity << endl;

			// Break the loop as the knapsack is full
			break;
		}

	}

	cout << "Max profit: " << maxValue ;
}

int main()
{
	int size ;

	cout << "Enter No. of Items: "  ;
	cin >> size ;

	Item data[size] ;

	for (int i = 0; i < size; i++)
	{
		cout << "Enter the " << i << "th item profit Value: " ;
		cin >> data[i].profit ;

		cout << "Enter the " << i << "th item weight Value: " ;
		cin >> data[i].weight ;

		data[i].index = i ;
	}

	int maxWeight = 0 ;

	cout << "Enter the max weight: " ;
	cin >> maxWeight ;
	
	knapSack(data,size,maxWeight) ;

	return 0 ;
}
/////3333333333333--------------
#include <iostream>
#include <vector>

using namespace std;

struct Edge {
    int u, v, w;
};

int bellmanFord(int n, int m, int src, int dest, vector<Edge> &edges) {
    vector<int> dist(n + 1, 1e9);
    dist[src] = 0; 

    // Relax edges n-1 times
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < m; j++) {
            int u = edges[j].u;
            int v = edges[j].v;
            int w = edges[j].w;

            if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
            }
        }
    }

    // Check for negative cycles
    bool hasNegativeCycle = false;
    for (int j = 0; j < m; j++) {
        int u = edges[j].u;
        int v = edges[j].v;
        int w = edges[j].w;

        if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
            hasNegativeCycle = true;
            break;
        }
    }

    if (hasNegativeCycle) {
        return -1; // Negative cycle detected
    }

    return dist[dest];
}

int main() {
    int n, m, src, dest;
    cout << "Enter the number of nodes (n): ";
    cin >> n;
    cout << "Enter the number of edges (m): ";
    cin >> m;

    vector<Edge> edges(m);
    cout << "Enter the edges in the format (u v w):" << endl;
    for (int i = 0; i < m; i++) {
        cin >> edges[i].u >> edges[i].v >> edges[i].w;
    }

    cout << "Enter the source node: ";
    cin >> src;
    cout << "Enter the destination node: ";
    cin >> dest;

    int shortestDistance = bellmanFord(n, m, src, dest, edges);

    if (shortestDistance == -1) {
        cout << "There is a negative cycle in the graph." << endl;
    } else {
        cout << "Shortest distance from node " << src << " to node " << dest << ": " << shortestDistance << endl;
    }

    return 0;
}
////444-------------------
#include <bits/stdc++.h>

using namespace std;

const int INF = INT_MAX;

// Function to reduce rows and columns in the cost matrix
void reduceMatrix(vector<vector<int>>& costMatrix) {
    int n = costMatrix.size();

    // Reduce rows
    for (int i = 0; i < n; i++) {
        int minVal = INF;
        for (int j = 0; j < n; j++) {
            if (costMatrix[i][j] < minVal) {
                minVal = costMatrix[i][j];
            }
        }
        if (minVal != INF) {
            for (int j = 0; j < n; j++) {
                if (costMatrix[i][j] != INF) {
                    costMatrix[i][j] -= minVal;
                }
            }
        }
    }

    // Reduce columns
    for (int j = 0; j < n; j++) {
        int minVal = INF;
        for (int i = 0; i < n; i++) {
            if (costMatrix[i][j] < minVal) {
                minVal = costMatrix[i][j];
            }
        }
        if (minVal != INF) {
            for (int i = 0; i < n; i++) {
                if (costMatrix[i][j] != INF) {
                    costMatrix[i][j] -= minVal;
                }
            }
        }
    }
}

// Branch and Bound function
void branchAndBoundTSP(vector<vector<int>>& costMatrix, int& minCost, int level, int pathLength, vector<int>& path, vector<int>& minPath) {
    int n = costMatrix.size();

    if (level == n) {
        // All cities have been visited
        pathLength += costMatrix[path[level - 1]][path[0]];
        if (pathLength < minCost) {
            minCost = pathLength;
            minPath = path;
        }
        return;
    }

    for (int i = 0; i < n; i++) {
        if (costMatrix[path[level - 1]][i] != INF) {
            if (find(path.begin(), path.end(), i) == path.end()) {
                int temp = costMatrix[path[level - 1]][i];
                pathLength += temp;

                if (pathLength + (n - level) * temp < minCost) {
                    path[level] = i;
                    branchAndBoundTSP(costMatrix, minCost, level + 1, pathLength, path, minPath);
                }

                pathLength -= temp;
            }
        }
    }
}

int main() {

    int n;  // Number of cities
    cout << "Enter the number of cities: ";
    cin >> n;

    vector<vector<int>> costMatrix(n, vector<int>(n));

    cout << "Enter the cost matrix (use 0 for unconnected cities):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> costMatrix[i][j];
            if (costMatrix[i][j] == 0) {
                costMatrix[i][j] = INF;
            }
        }
    }

    vector<int> path(n);
    vector<int> minPath(n);
    int minCost = INF;

    reduceMatrix(costMatrix);
    path[0] = 0;  // Starting from city 0
    branchAndBoundTSP(costMatrix, minCost, 1, 0, path, minPath);

    cout << "Optimal TSP tour: ";
    for (int i = 0; i < n; i++) {
        cout << minPath[i] << " -> ";
    }
    cout << minPath[0] << endl;

    cout << "Minimum cost: " << minCost << endl;

    return 0;
}

